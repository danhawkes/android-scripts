#!/usr/bin/python

import argparse
import os
import errno
from subprocess import call
import re

RESOLUTIONS = {
    'launcher': [48, 48],
    'action_bar': [32, 32],
    'notification': [24, 24],
    'small': [16, 16]
}

DENSITIES = {
    'mdpi': 1.0,
    'hdpi': 1.5,
    'xhdpi': 2.0,
    'xxhdpi': 3.0
}


def _mkdir(path):
    try:
        os.makedirs(path)
    except OSError as exception:
        if exception.errno != errno.EEXIST:
            raise


def _valid_res(value):
    if value in RESOLUTIONS:
        return RESOLUTIONS[value]
    else:
        match = re.match('(\d+)\D+(\d+)', value)
        if match:
            return [int(match.group(1)), int(match.group(2))]
        else:
            raise argparse.ArgumentTypeError(
                'Invalid resolution format: \'%s\'' % value)


parser = argparse.ArgumentParser(
    description='Resize an image for multiple Android densities.')
parser.add_argument(
    'file',
    type=file,
    help='Source file to be resized.')
parser.add_argument(
    'res',
    type=_valid_res,
    help='Output image resolution. May be one of the predefined sizes: %s, '
         'or a resolution in the form of \'X,Y\'.' % RESOLUTIONS.keys())
parser.add_argument(
    '-o', '--output-dir',
    dest='out',
    help='Output directory.',
    default='.')
parser.add_argument(
    '-e', '--extension',
    dest='ext',
    help='Output file extension. Defaults to PNG.',
    default='png')

args = parser.parse_args()

for density, scalar in DENSITIES.items():

    # scaled output dimensions
    res = [round(n * scalar) for n in args.res]

    # output path with modified extension
    path = os.path.join(
        args.out, 'drawable-{}/{}'.format(density,
                                          os.path.basename(args.file.name)))
    path = os.path.splitext(path)[0] + '.' + args.ext

    # create directory and resize
    _mkdir(os.path.dirname(path))
    cmd = 'convert {} -background transparent -layers merge -resize {}x{}\! \
        {}'.format(args.file.name, res[0], res[1], path)
    call(cmd, shell=True)
